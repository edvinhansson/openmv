(set some_fun2 (fun () (
	(ret "hi")
)))

(set some_fun (fun (x y) (
	(put "Hello, I'm a function! X: ")
	(put x)
	(put " Y: ")
	(print y)

	(put "Calling `some_fun2': ")
	(print (some_fun2))

	(some_fun 1 1)
)))

(set a 290)
(set b 30)

(print "")

(print a)
(print b)

(print (+ a b))

(some_fun 10 2)

(native_fun "Hello, world!")

(print (< 1 0))
(print (<= 1 5))
(print (> 1 0))
(print (>= 1 0))

(print (= 3 3))

(if (< 2 3) (
	(print "Hello, from an if block.")
	(print "Second line")
)(
	(print "Hello, from an else block.")
	(print "Second line")
))

(set i 0)
(while (< i 100) (
	(print i)

	(set i (+ i 1))
))

(print (memory_usage))

; Print Fibonacci numbers

(set a 0)
(set b 1)
(set c 0)

(set n 100)

(while (< c n) (
	(set c (+ a b))

	(set a b)
	(set b c)

	(print c)
))

(while false (
	(nil)
))
